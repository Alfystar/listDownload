- Correct metric when the download is less than the parallel channel
- Print more detail about the metric
-Create a man file, and plot him (maybe impossible for the path...)
- Create the item class, where every download is different object
- download first the not present file, and concurrently ask to the user if Download again, Overwrite, ignore the file
- Make possible apply same chose for all
- Think a gui to "create" easly the input file (pyQt5) and than execute it, active it when call listDownload without no params, and save the file in the currently working directory, to easly change or restart the download after the settings

-Reorder the system with the logic: Create list item reading the argv line, if more argv line are present (the file setting) execute for each line the parsing and create the item-list.
- Add global param option at the start of the file

-find a way to redirect the terminal output all to the same, maybe using split terminal

- Usando course, ogni thread avrà la sua mini-finestra e potrà plottare le proprie informazioni, mentre usando la libreria responde di python i file verranno scaricati.
Per il momento, usando course, se non vengono passati input o json al programma, verrà creata una finestra per aggiungere manualmente tutti gli elementi che si vuole, e via via che vengono confermati, si crea la lista, che deve poter essere modificabile, quando si dà conferma del download, viene creato il json per questa configurazione e salvato della directory corrente, quindi si passa alle mini finestre e vengono printati tutti i dati.
Prima di far partire i download, devono essere fatte le get di tutti i file, scoprire quelli ragiungibili, notificare gli irragiungibili e chiedere se procedere comunque, calcolare la dimensione totale da scaricare, per poter avere una barra della percentuale complessiva, e al termine del programma, una volta chiuso course, printare una lista dei file che non si è potuto scaricare sul terminale
